
@using DienDanThaoLuan.Models;
@using PagedList.Mvc;
@model PagedList.PagedList<ThanhVien>
@{
    ViewBag.Title = "Quản Lý Thành Viên";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="container mt-5 mb-5">
    @if (TempData["ThongBao"] != null)
    {
        <div class="alert alert-info" role="alert">
            @TempData["ThongBao"]
        </div>
    }

    <h2 class="text-primary mb-4 text-center">Quản Lý Thành Viên</h2>

    <div class="mb-4 d-flex align-items-center gap-3">
        @using (Html.BeginForm("QLThanhVien", "QLThanhVien", FormMethod.Get, new { @class = "d-inline-flex w-50" }))
        {
            <div class="input-group w-100">
                <input type="text" id="searchInput" name="searchInput" class="form-control" placeholder="Tìm kiếm theo tên đăng nhập..." value="@ViewBag.SearchInput" />
                <button class="btn btn-primary rounded-end" type="submit" style="min-width: 100px;">Tìm kiếm</button>
            </div>
        }

        <div class="ms-auto w-25" style="margin-right:20px;">
            <select id="sortSelect" class="form-select" onchange="location = this.value;">
                <option value="@Url.Action("QLThanhVien", new { sortOrder = "namea-z" })" @(ViewBag.CurrentSortOrder == "namea-z" ? "selected" : "")>Sắp xếp theo tên (A-Z)</option>
                <option value="@Url.Action("QLThanhVien", new { sortOrder = "datenew" })" @(ViewBag.CurrentSortOrder == "datenew" ? "selected" : "")>Sắp xếp theo ngày tham gia (Mới nhất)</option>
                <option value="@Url.Action("QLThanhVien", new { sortOrder = "namez-a" })" @(ViewBag.CurrentSortOrder == "namez-a" ? "selected" : "")>Sắp xếp theo tên (Z-A)</option>
                <option value="@Url.Action("QLThanhVien", new { sortOrder = "dateold" })" @(ViewBag.CurrentSortOrder == "dateold" ? "selected" : "")>Sắp xếp theo ngày tham gia (Lâu nhất)</option>
            </select>
        </div>
    </div>
    <p class="text-left">Số lượng thành viên: @ViewBag.SL</p>
    @if (Model.Any())
    {
        <div class="row justify-content-center" id="memberList">
            @foreach (var member in Model)
            {
                var bv = member.BaiViets.Where(l => l.MaTV == member.MaTV).ToList(); // Lấy danh sách chủ đề cho mỗi loại (có thể rỗng)
                var count = bv.Count();
                <div class="col-lg-4 col-md-6 mb-4 member-card" data-name="@member.TenDangNhap" data-join-date="@member.NgayThamGia">
                    <div class="card border-0 shadow-sm rounded">
                        <img src="/Images/@member.AnhDaiDien" alt="Avatar" class="card-img-top img-fluid mt-2" style="border-radius: 50px; width: 100px; height: 100px; object-fit: cover; margin: 0 auto;" />
                        <div class="card-body">
                            <h5 class="card-title text-center">@member.TenDangNhap</h5>
                            @if (string.IsNullOrEmpty(member.MatKhau))
                            {
                                <p class="text-center text-danger">Tài khoản đã bị khóa</p>
                            }
                            <p class="text-center text-muted member-fullname">@member.HoTen</p>
                            <p class="text-center text-muted">Email: @member.Email</p>
                            <p class="text-center text-muted">Ngày sinh: @(member.NgaySinh?.ToString("dd/MM/yyyy") ?? "N/A")</p>
                            <p class="text-center text-muted">Giới tính: @member.GioiTinh</p>

                            <p class="text-center text-muted">Ngày tham gia: @(member.NgayThamGia?.ToString("dd/MM/yyyy") ?? "N/A")</p>
                            <p class="text-center text-muted">Bài viết: @count bài</p>
                            <div class="d-flex justify-content-center mt-3">
                                @if (string.IsNullOrEmpty(member.MatKhau))
                                {
                                    <button class="btn btn-danger" disabled>Khóa Tài Khoản</button>
                                }
                                else
                                {
                                    <button class="btn btn-danger" onclick="confirmLock('@Url.Action("KhoaTaiKhoan", "QLThanhVien", new { id = member.MaTV })')">Khóa Tài Khoản</button>
                                }
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="MenuTrang">
            @Html.PagedListPager(Model, page => Url.Action("QLThanhVien", new { page = page, searchInput = ViewBag.SearchInput, sortOrder = ViewBag.CurrentSortOrder }))
        </div>
    }
    else
    {
        <p class="text-muted text-center">Không có thành viên nào.</p>
    }

    <!-- Modal -->
    <div id="overlay" class="overlay" style="display:none;"></div> <!-- Lớp phủ -->
    <div id="confirmModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h3>Xác Nhận</h3>
            <p style="font-size:20px">Bạn có chắc chắn muốn khóa tài khoản này?</p>
            <button id="confirmButton" class="btn btn-danger mb-2">Khóa Tài Khoản</button>
            <button class="btn btn-secondary" onclick="closeModal()">Hủy</button>
        </div>
    </div>

</div>
<script>
    let actionUrl = ''; // Khởi tạo biến để lưu URL hành động

    function confirmLock(url) {
        actionUrl = url; // Lưu URL vào biến
        document.getElementById("overlay").style.display = "block";
        document.getElementById('confirmModal').style.display = 'block'; // Hiển thị modal
    }

    function closeModal() {
        document.getElementById("overlay").style.display = "none";
        document.getElementById('confirmModal').style.display = 'none'; // Ẩn modal
    }

    document.getElementById('confirmButton').onclick = function () {
        window.location.href = actionUrl; // Chuyển hướng đến URL đã lưu
        closeModal(); // Đóng modal
    };


</script>
<style>
    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Màu nền mờ đen */
        z-index: 999; /* Đặt lớp phủ lên trên mọi thứ khác */
        display: none; /* Ẩn lớp phủ mặc định */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% từ trên xuống và tự động căn giữa */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Chiều rộng modal */
        max-width: 500px; /* Chiều rộng tối đa */
        text-align: center; /* Căn giữa nội dung */
        position: relative; /* Để nút đóng có thể được định vị chính xác */
    }

    .close {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        position: absolute; /* Định vị tuyệt đối */
        top: 10px; /* Khoảng cách từ trên */
        right: 20px; /* Khoảng cách từ bên phải */
        cursor: pointer; /* Thay đổi con trỏ khi hover */
    }

        .close:hover,
        .close:focus {
            color: black;
        }

    .card {
        transition: transform 0.2s;
        flex-direction: column; /* Đặt hướng chiều dọc */
        height: 100%; /* Đảm bảo card chiếm hết chiều cao */
    }

    .card-body {
        flex-grow: 1; /* Cho phép phần thân card mở rộng để chiếm hết không gian còn lại */
    }

    .card:hover {
        transform: scale(1.05); /* Phóng to khi hover */
    }

    .card-title {
        font-weight: bold;
        color: #0c88c2;
    }

    .member-fullname {
        font-weight: bold;
        font-size: 1.1rem; /* Tăng kích thước font */
        color: #ff5733; /* Màu sắc nổi bật */
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2); /* Đổ bóng cho văn bản */
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }
</style>
